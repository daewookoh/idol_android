import com.google.gson.Gson
import com.google.gson.GsonBuilder
import com.google.gson.JsonArray
import com.google.gson.JsonObject

plugins {
    id 'com.android.application'
    id 'com.google.firebase.firebase-perf'
    id 'org.sonarqube'
    id 'kotlin-android'
    id ("com.google.devtools.ksp") version("1.9.23-1.0.20")
    id 'com.google.firebase.appdistribution'
    id 'com.google.android.gms.oss-licenses-plugin'
    id("org.jlleitschuh.gradle.ktlint") version "11.0.0"
    id("org.jlleitschuh.gradle.ktlint-idea") version "11.0.0"
    id 'kotlin-parcelize'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

//apply plugin: 'com.google.android.libraries.mapsplatform.secrets-gradle-plugin'


// mezzo Îß§Ï≤¥ ÏïÑÏù¥Îîî Í≤ÄÏÇ¨
def MEZZO_SECTION_IDOL = "300884"
def MEZZO_SECTION_ACTOR = "801178"

ext.APP_ID_ORIGINAL = "net.ib.mn"
// ÌååÏÉùÏï± applicationId
ext.APP_ID_ONESTORE = "com.exodus.myloveidol.twostore"
ext.APP_ID_CHINA = "com.exodus.myloveidol.china"
ext.APP_ID_CELEB = "com.exodus.myloveactor"

def getArchiveName(applicationId) {
    def archiveName = "idol_original"
    if( applicationId == APP_ID_ORIGINAL ) {
        archiveName = "idol_original"
    }
    if( applicationId == APP_ID_ONESTORE ) {
        archiveName = "idol_onestore"
    }
    if( applicationId == APP_ID_CHINA ) {
        archiveName = "idol_china"
    }
    if( applicationId == APP_ID_CELEB ) {
        archiveName = "celeb"
    }

    println("archiveName: ${archiveName}")

    return archiveName
}

def getAppdistributionId(applicationId) {
    def appDistId = "1:444896554540:android:12a0be743c254073"
    if( applicationId == APP_ID_ORIGINAL ) {
        appDistId = "1:444896554540:android:12a0be743c254073"
    }
    if( applicationId == APP_ID_ONESTORE ) {
        appDistId = "1:444896554540:android:8c6d5bc2b11bbdb3"
    }
    if( applicationId == APP_ID_CHINA ) {
        appDistId = "1:444896554540:android:69512595327f39b7e66b89"
    }
    if( applicationId == APP_ID_CELEB ) {
        appDistId = "1:445540446080:android:f1790ef919f8e7bc"
    }
    return appDistId
}

def getAppName(applicationId) {
    def appName = ":aedol: ÌïòÏñÄÌïòÌä∏‚ô° Ïï±Î≤àÎì§Ïù¥"
    if( applicationId == APP_ID_ORIGINAL ) {
        appName = ":aedol: ÌïòÏñÄÌïòÌä∏‚ô° Ïï±Î≤àÎì§Ïù¥"
    }
    if( applicationId == APP_ID_ONESTORE ) {
        appName = "1Ô∏è‚É£ÏõêÏä§ÌÜ†Ïñ¥ APKÍ∞Ä"
    }
    if( applicationId == APP_ID_CHINA ) {
        appName = "üá®üá≥Ï§ëÍµ≠Ïï± APKÍ∞Ä"
    }
    if( applicationId == APP_ID_CELEB ) {
        appName = ":celeb: ÏÖÄÎüΩ Ïï±Î≤àÎì§Ïù¥"
    }

    return appName
}

allprojects {
    repositories {
        maven { url "https://maven.google.com" }
        maven {
            name "Tapjoy's maven repo"
            url "https://sdk.tapjoy.com/"
        }
        maven {
            url "https://imobile-maio.github.io/maven"
        }
        maven{
            url 'https://fan-adn.github.io/nendSDK-Android-lib/library'
        }
        mavenCentral()
        maven {url 'https://android-sdk.is.com/'}
        maven {url 'https://artifact.bytedance.com/repository/pangle'}
    }
}

def getBuildNumber(){
    try{
        return Integer.valueOf(System.getenv("BITBUCKET_BUILD_NUMBER") ?: 1)
    }catch(e){
        return 1
    }
}

def getRevisionCount() {
	return Integer.parseInt('git rev-list --count --first-parent HEAD'.execute().text.trim());
}

def getVersionName() {
	try {
		def stringsFile = file("./src/main/res/values/version.xml")
		return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_version' }.text()
	}catch(e){
		println(e)
		return "1.0.0"
	}
}

def getAppName() {
    try {
        def stringsFile = file("../string/src/main/res/values-ko/strings.xml")
        if( applicationId == APP_ID_ONESTORE ) {
            return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_name_onestore_upper' }.text()
        } else if( applicationId == APP_ID_CELEB ) {
            return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'actor_app_name_upper' }.text()
        } else {
            return new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_name_upper' }.text()
        }
    }catch(e){
        println(e)
        return "ÏµúÏï†Îèå"
    }
}

static def removeEmojis(String input) {
    // Î¨∏ÏûêÏó¥ÏóêÏÑú Ïù¥Î™®Ìã∞ÏΩò Ìå®ÌÑ¥ Ï∞æÏïÑ Ï†úÍ±∞
    def result = input.replaceAll("[\\p{So}\u200d]", '')
    return result
}

android {
    compileSdk 34

    def currentBuildNumber = getBuildNumber()
	def versionString = getVersionName()
    defaultConfig {
        applicationId "net.ib.mn"
        minSdkVersion 24
        targetSdkVersion 34
		versionCode currentBuildNumber
		versionName versionString
        multiDexEnabled true
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }

        buildTypes {
            debug {
            }

            release {
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    namespace = "net.ib.mn"
    productFlavors {
        app {
            dimension "default"
            applicationId APP_ID_ORIGINAL
            firebaseAppDistribution {
                appId = "1:444896554540:android:12a0be743c254073"
                artifactType = "AAB"
            }
            buildConfigField "boolean", "CELEB", "false"
            buildConfigField "boolean", "ONESTORE", "false"
            buildConfigField "boolean", "CHINA", "false"
            buildConfigField "String", "KAKAO_APP_KEY", '"0dd43f929e357f51e61c2d82a683b29a"'
            manifestPlaceholders["KAKAO_APP_KEY_FOR_MANIFEST"] = "0dd43f929e357f51e61c2d82a683b29a"
            manifestPlaceholders["FACEBOOK_CLIENT_ID"] = "d8c7bdf0d17c7e774d4f637d29d6db9a"
            manifestPlaceholders["host"] = "www.myloveidol.com"
            manifestPlaceholders["host_wildcard"] = "*.myloveidol.com"
            manifestPlaceholders["scheme"] = "choeaedol"
            manifestPlaceholders["devscheme"] = "devloveidol"

            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=app"
                }
            }

            System.setProperty("GRADLE_DAEMON", "true")
        }
        onestore {
            dimension "default"
            applicationId APP_ID_ONESTORE
            firebaseAppDistribution {
                appId = "1:444896554540:android:8c6d5bc2b11bbdb3"
                artifactType = "APK"
            }

            buildConfigField "boolean", "CELEB", "false"
            buildConfigField "boolean", "ONESTORE", "true"
            buildConfigField "boolean", "CHINA", "false"
            buildConfigField "String", "KAKAO_APP_KEY", '"8af2706fda8ad5ecc7b1b5c03bb0c457"'
            manifestPlaceholders["KAKAO_APP_KEY_FOR_MANIFEST"] = "8af2706fda8ad5ecc7b1b5c03bb0c457"
            manifestPlaceholders["FACEBOOK_CLIENT_ID"] = "d8c7bdf0d17c7e774d4f637d29d6db9a"
            manifestPlaceholders["host"] = "www.myloveidol.com"
            manifestPlaceholders["host_wildcard"] = "*.myloveidol.com"
            manifestPlaceholders["scheme"] = "choeaedol"
            manifestPlaceholders["devscheme"] = "devloveidol"

            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=onestore"
                }
            }

            proguardFile 'proguard-rules-onestore.pro'
            System.setProperty("GRADLE_DAEMON", "false")
        }
        china {
            dimension "default"
            applicationId APP_ID_CHINA
            firebaseAppDistribution {
                appId = "1:444896554540:android:69512595327f39b7e66b89"
                artifactType = "APK"
            }
            buildConfigField "boolean", "CELEB", "false"
            buildConfigField "boolean", "ONESTORE", "false"
            buildConfigField "boolean", "CHINA", "true"
            buildConfigField "String", "KAKAO_APP_KEY", '"0dd43f929e357f51e61c2d82a683b29a"'
            manifestPlaceholders["KAKAO_APP_KEY_FOR_MANIFEST"] = "0dd43f929e357f51e61c2d82a683b29a"
            manifestPlaceholders["FACEBOOK_CLIENT_ID"] = "d8c7bdf0d17c7e774d4f637d29d6db9a"
            manifestPlaceholders["host"] = "www.myloveidol.com"
            manifestPlaceholders["host_wildcard"] = "*.myloveidol.com"
            manifestPlaceholders["scheme"] = "choeaedol"
            manifestPlaceholders["devscheme"] = "devloveidol"

            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=china"
                }
            }
            System.setProperty("GRADLE_DAEMON", "true")
        }
        celeb {
            dimension "default"
            applicationId APP_ID_CELEB
            firebaseAppDistribution {
                appId = "1:445540446080:android:f1790ef919f8e7bc"
                artifactType = "AAB"
                serviceCredentialsFile = file('../firebase_app_distribution_celeb.json')
            }
            buildConfigField "boolean", "CELEB", "true"
            buildConfigField "boolean", "ONESTORE", "false"
            buildConfigField "boolean", "CHINA", "false"
            buildConfigField "String", "KAKAO_APP_KEY", '"6715432cd074c4d0dd029b3e8995add2"'
            manifestPlaceholders["KAKAO_APP_KEY_FOR_MANIFEST"] = "6715432cd074c4d0dd029b3e8995add2"
            manifestPlaceholders["FACEBOOK_CLIENT_ID"] = "a59d87d83c736f501cb6d7223010344d"
            manifestPlaceholders["host"] = "www.myloveactor.com"
            manifestPlaceholders["host_wildcard"] = "*.myloveactor.com"
            manifestPlaceholders["scheme"] = "choeaedolceleb"
            manifestPlaceholders["devscheme"] = "myloveactor"

            externalNativeBuild {
                ndkBuild {
                    arguments "PRODUCT_FLAVOR=celeb"
                }
            }
            System.setProperty("GRADLE_DAEMON", "true")
        }
    }

    signingConfigs {
        release {
            storeFile file("../mntalk.keystore")
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD")
            keyAlias System.getenv("SIGNING_KEY_ALIAS")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
        chinaRelease {
            storeFile file("../china.jks")
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD")
            keyAlias "key0"
            keyPassword System.getenv("SIGNING_KEY_PASSWORD")
        }
        celebRelease {
            storeFile file("../celeb.keystore")
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD_CELEB")
            keyAlias System.getenv("SIGNING_KEY_ALIAS_CELEB")
            keyPassword System.getenv("SIGNING_KEY_PASSWORD_CELEB")
        }
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    flavorDimensions = ["default"]

    buildTypes {
        debug {
            try {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                ext.enableCrashlytics = false
                buildConfigField "int", "VERSION_CODE", getBuildNumber().toString()
            }catch(e){
                println("Exception debug: ${e}")
            }
        }
        release {
            try{
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

                productFlavors.app.signingConfig signingConfigs.release
                productFlavors.onestore.signingConfig signingConfigs.release
                productFlavors.china.signingConfig signingConfigs.chinaRelease
                productFlavors.celeb.signingConfig signingConfigs.celebRelease

                firebaseAppDistribution {
                    groups = "qatesters"
                    serviceCredentialsFile = file('../firebase_app_distribution.json')
                    releaseNotesFile="./release-notes.txt"
                }
                lintOptions {
                    disable 'MissingTranslation'
                    checkReleaseBuilds false
                    // Or, if you prefer, you can continue to check for errors in release builds,
                    // but continue the build even when errors are found:
                    abortOnError false
                }

                buildConfigField "int", "VERSION_CODE", getBuildNumber().toString()
            }catch(e){
                println("Exception buildTypes.release: ${e}")
            }
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/maven/com.google.guava/guava/pom.properties', 'META-INF/maven/com.google.guava/guava/pom.xml', 'META-INF/DEPENDENCIES', 'META-INF/NOTICE', 'META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }

    repositories {
        google()
        mavenCentral()
        flatDir {
            dirs 'libs'
        }
        maven { url "https://jitpack.io" }
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"

    }

    bundle{
        language{
            enableSplit = false
        }
        density {
            // This property is set to true by default.
            enableSplit = false
        }
        abi {
            // This property is set to true by default.
            enableSplit = false
        }

    }

    def mezzo = file("./src/main/res/values/mezzo.xml")
    def xml = new XmlParser().parse(mezzo)
    xml.integer.each {
        if( it.@name == "mezzo_section" ) {
            def sectionId = it.text()
            if( android.defaultConfig.applicationId == APP_ID_ORIGINAL && sectionId != MEZZO_SECTION_IDOL ) {
                throw new GradleException("mezzo_section should be ${MEZZO_SECTION_IDOL}")
            }
            if( android.defaultConfig.applicationId == APP_ID_CELEB && sectionId != MEZZO_SECTION_ACTOR ) {
                throw new GradleException("mezzo_section should be ${MEZZO_SECTION_ACTOR}")
            }
        }
    }

    dataBinding {
        enabled true
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/onestore/jni/Android.mk'
        }
    }

    buildFeatures {
        compose true
    }

    // Compose Ïª¥ÌååÏùºÎü¨ Î≤ÑÏ†Ñ ÏÑ§Ï†ï
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.13"
    }
}

task setArchiveName {
    if( project.hasProperty("applicationId")) {
        applicationId = project.getProperty("applicationId")
        def archiveName = getArchiveName(applicationId)
        setProperty("archivesBaseName", "${archiveName}_${getDate()}_${getVersionName()}_${getBuildNumber()}")
        println("archiveName: ${archiveName}")
    }
}


//git commit messageÍ∞ÄÏ†∏Ïò§Îäî ÌÖåÏä§ÌÅ¨Ïù¥Îã§.
task getCommitMessage {
    def appDistributionId = ""
    def appName = ""
    if( project.hasProperty("applicationId")) {
        appDistributionId = getAppdistributionId(project.getProperty("applicationId"))
        appName = getAppName(project.getProperty("applicationId"))
    }

    String prevHash = ""
    String commitHash = ""

    doFirst({
        //repository
        String repository = String.valueOf(System.getenv("BITBUCKET_REPO_FULL_NAME"))

        //Ïú†Ï†Ä authÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞ username:passwordÍ∞í.
        String authValue = String.valueOf(System.getenv("BB_AUTH_STRING"))

        //ÌòÑÏû¨ Ïª§Î∞ã Ìï¥ÏãúÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        String commitFullHash = String.valueOf(System.getenv("BITBUCKET_COMMIT"))

        //Ïù¥Ï†Ñ ÎπåÎìúÌïú Í∞ÄÏû• ÎßàÏßÄÎßâ Ïª§Î∞ã Ìï¥ÏãúÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        int previousBuildNumber = Integer.valueOf(System.getenv("BITBUCKET_BUILD_NUMBER")) - 1
        String preCommitHashURL="https://api.bitbucket.org/2.0/repositories/$repository/pipelines/$previousBuildNumber"
        def procFullHashCommand = ["sh", "-c", "curl -s -X GET --user '$authValue' '$preCommitHashURL' | jq '.target.commit.hash'"]
        def procFullHashExe = procFullHashCommand.execute()

        String procFullHash = procFullHashExe.in.text.replaceAll("\"", "").trim()

        // procFullHashÍ∞Ä 7ÏûêÎ¶¨Î≥¥Îã§ ÏßßÏúºÎ©¥ Ï†ÑÏ≤¥ Î¨∏ÏûêÏó¥ÏùÑ ÏÇ¨Ïö©ÌïòÍ≥†, 7ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Î©¥ ÏïûÏùò 7ÏûêÎ¶¨Îßå Í∞ÄÏ†∏ÏòµÎãàÎã§.
        prevHash = procFullHash.length() >= 7 ? procFullHash.substring(0, 7) : procFullHash
    })

    doLast({
        println "Generating release notes (release-notes.txt)"
        def releaseNotes = new File('release-notes.txt')
        releaseNotes.delete()
        println "*** ${appName}"

        //Í∞ÄÏû• ÎßàÏßÄÎßâ ÌÉúÍ∑∏Î∂ÄÌÑ∞ ÌòÑÏû¨ÍπåÏßÄ commit mesageÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        def cmdLine = ['sh' , '-c', 'git log --pretty="%s"' + " '"+ prevHash + '..' + commitHash+ "'" + ' | sort | awk \'/IDOL-/ {issues[$1] = issues[$1] ? issues[$1] " / " $0 : $0; } END { for(i in issues) print issues[i]}\'']
        def procCommit = cmdLine.execute()

        StringBuilder sb = new StringBuilder()
        sb.append("\n\n‚ú® <https://appdistribution.firebase.google.com/testerapps/${appDistributionId} | *${versionName} (${getBuildNumber()})*> ÎπåÎìú ÏÑ±Í≥µ! ${appName} ÎßåÎì§Ïñ¥Ï°åÏäµÎãàÎã§." + "\n\n")
        sb.append("üóìBuild Date :" + date + "\n\n")
        sb.append("üîîBuild Number : " + buildNumber + "\n\n")
        sb.append("üí°Version : " + versionName + "\n\n")

        //ÎÇ®ÏùÄ ÏûêÌåå ÌååÏùº Í∞úÏàò Ïπ¥Ïö¥Ìä∏.
        def cmdLeftJava = ['sh', '-c', 'find "./app/src" -name "*.java" | wc -l | tr -d \' \'']
        def procLeftJava = cmdLeftJava.execute()
        def countLeftjava = procLeftJava.inputStream.text

        //ÎÇ®ÏùÄ ÏΩîÌãÄÎ¶∞ ÌååÏùº Í∞úÏàò Ïπ¥Ïö¥Ìä∏.
        def cmdLeftKotlin = ['sh', '-c', 'find "./app/src" -name "*.kt" | wc -l | tr -d \' \'']
        def procLeftKotlin = cmdLeftKotlin.execute()
        def countLeftKotlin = procLeftKotlin.inputStream.text

        double migraionPercentage = Math.floor((countLeftjava.toDouble() * 1000 / (countLeftjava.toDouble() + countLeftKotlin.toDouble())) / 10)

        sb.append("ÎÇ®ÏùÄ ÏûêÎ∞î ÌååÏùº : $countLeftjava\n")
        sb.append("ÏΩîÌãÄÎ¶∞ ÌååÏùº : $countLeftKotlin\n")
        sb.append("Ï†ÑÏ≤¥ ÏûêÎ∞î ÌååÏùº ÎπÑÏú® : $migraionPercentage% ÏûÖÎãàÎã§. \n\n")

        sb.append("üõ†Changes\n")

        procCommit.in.eachLine { line ->
            //Ïª§Î∞ã Î©îÏãúÏßÄ Í≥µÎ∞±Ï†úÍ±∞.
            String newLine = line.trim()
            int splitedIndex = newLine.indexOf(" ")
            String issue = newLine.substring(0, splitedIndex)
            String message = newLine.substring(splitedIndex)
            sb.append("<https://exodusent.atlassian.net/browse/${issue}| *${issue}*> ${message}" + "\n")
        }

        BufferedWriter br = releaseNotes.newWriter()
        br << sb
        br.close()

        releaseNotes << "\n\n\n"
    });
}

task getJiraJsonFile {
    def appDistributionId = ""
    def appName = ""
    if( project.hasProperty("applicationId")) {
        appDistributionId = getAppdistributionId(project.getProperty("applicationId"))
        appName = getAppName(project.getProperty("applicationId"))
    }

    String prevHash = ""
    String commitHash = ""

    doFirst({
        //repository
        String repository = String.valueOf(System.getenv("BITBUCKET_REPO_FULL_NAME"))

        //Ïú†Ï†Ä authÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞ username:passwordÍ∞í.
        String authValue = String.valueOf(System.getenv("BB_AUTH_STRING"))

        //ÌòÑÏû¨ Ïª§Î∞ã Ìï¥ÏãúÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        String commitFullHash = String.valueOf(System.getenv("BITBUCKET_COMMIT")).trim()

        // Ïù¥Ï†Ñ ÎπåÎìúÏùò Í∞ÄÏû• ÎßàÏßÄÎßâ Ïª§Î∞ã Ìï¥ÏãúÎ•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
        int previousBuildNumber = Integer.valueOf(System.getenv("BITBUCKET_BUILD_NUMBER")) - 1
        String preCommitHashURL="https://api.bitbucket.org/2.0/repositories/$repository/pipelines/$previousBuildNumber"
        def procFullHashCommand = ["sh", "-c", "curl -s -X GET --user '$authValue' '$preCommitHashURL' | jq '.target.commit.hash'"]
        def procFullHashExe = procFullHashCommand.execute()

        String procFullHash = procFullHashExe.in.text.replaceAll("\"", "").trim()

        // prevHashÏôÄ commitHashÏóêÏÑú Í∏∏Ïù¥Í∞Ä 7ÏûêÎ¶¨ Ïù¥ÏÉÅÏù∏ÏßÄ ÌôïÏù∏ÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å Í∞íÏùÑ Ï∂îÏ∂úÌï©ÎãàÎã§.
        prevHash = procFullHash.length() >= 7 ? procFullHash.substring(0, 7) : procFullHash
        commitHash = commitFullHash.length() >= 7 ? commitFullHash.substring(0, 7) : commitFullHash
    })

    doLast({
        def cmdLine = ['sh' , '-c', 'git log --pretty="%s"' + " '"+ prevHash + '..' + commitHash+ "'" + ' | sort | awk \'/IDOL-/ {issues[$1] = issues[$1] ? issues[$1] " / " $0 : $0; } END { for(i in issues) print issues[i]}\'']
        def procCommit = cmdLine.execute()

        FileWriter writer
        JsonObject jsonObject = new JsonObject()
        JsonObject jsonObject2 = new JsonObject()
        jsonObject2.addProperty("app_name", getAppName())
        jsonObject2.addProperty("version", versionName)
        jsonObject2.addProperty("build_number", getBuildNumber())
        //testerapps/Ïï±ÏïÑÏù¥Îîî.
        jsonObject2.addProperty("install_url", "https://appdistribution.firebase.google.com/testerapps/${appDistributionId}")
        JsonArray issueArray = new JsonArray()

        procCommit.in.eachLine { line ->
            String newLine = removeEmojis(line.trim()).trim()
            int splitedIndex = newLine.indexOf(" ")
            String issue = newLine.substring(0, splitedIndex)
            issueArray.add(issue)
        }


        jsonObject.add("data", jsonObject2)
        jsonObject.add("issues", issueArray)

        Gson gson = new GsonBuilder().setPrettyPrinting().create()
        String json = gson.toJson(jsonObject)

        try{
            writer = new FileWriter("./jira_issue.json");
            writer.write(json)
        } catch(IOException e){
            e.printStackTrace()
        } finally {
            try {
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    })
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'scripts/pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

task unzipAppDistributionFiles(type: Exec) {
    String password = String.valueOf(System.getenv("APPDIST_ZIP_PASSWORD"))
    executable "sh"
    args "-c", "unzip -P ${password} ../firebase_app_distribution.zip -d .."
}


//tasks.getByPath(':app:preBuild').dependsOn installGitHook

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd')
    return formattedDate
}

dependencies {

    //TNK
    implementation project(':tnk_rwd')
    implementation project(':exodusimagepicker')
    implementation project(':admob')
    implementation project(':core:data')
    implementation project(':core:designSystem')
    implementation project(':core:utils')
    implementation project(':core:domain')
    implementation(project(":core:model"))

    implementation libs.support.annotations
    implementation libs.androidx.legacy.support.v4
    def room_version = "2.5.2"
    def acraVersion = '5.9.7' // 5.10.x Ïù¥ÏÉÅ Î≤ÑÏ†Ñ ÏÇ¨Ïö©Ïãú ÎπåÎìúÏò§Î•ò Î∞úÏÉùÌïòÏó¨ Ïó¨Í∏∞Ïóê Î©àÏ∂∞Îë†
    def glide_version = "4.16.0"

    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.uiautomator
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules

    appImplementation files('libs/NASWall_20221122.jar')
    onestoreImplementation files('libs/NASWall_20221122.jar')
    chinaImplementation files('libs/NASWall_20221122.jar')
    // Î∞∞ÌÑ∞Î¶¨ÏÜåÎ™® Ïù¥ÏäàÎ°ú Ïù¥Ï†ÑÎ≤ÑÏ†ÑÏúºÎ°ú ÎèåÎ†§Îë† (Ïï†ÎèåÏù¥Îäî Í¥úÏ∞ÆÎã§Í≥† Ìï®)
    celebImplementation files('libs/NASWall_20211112.jar')

    implementation files('libs/adMan.jar')
    implementation files('libs/jericho-android.3.3.jar')
//    implementation files('libs/tapjoyconnectlibrary.jar')
    implementation libs.androidx.recyclerview
//    implementation "androidx.appcompat:appcompat-resources:$appcompat_version"
    implementation libs.androidx.annotation
    implementation libs.material
    implementation libs.gms.play.services.base
    implementation libs.play.services.auth
    implementation libs.play.services.plus
    implementation libs.play.services.analytics
    implementation platform(libs.firebase.bom)  //firebase BOM Ï∂îÍ∞Ä(ÎùºÏù¥Î∏åÎü¨Î¶¨ Î≤ÑÏ†Ñ ÏßÅÏ†ë Í¥ÄÎ¶¨)
    implementation(libs.firebase.analytics)
//    implementation 'com.google.firebase:firebase-ads:20.3.0'
    implementation libs.firebase.ads    //WidePhotoFragment ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî mediaView nullable Í∞ÄÎä•ÌïòÍ≤å Î≥ÄÍ≤ΩÎê®
//    implementation 'com.google.firebase:firebase-core:19.0.1'  //Ïù¥ SDKÏóêÎäî Google Ïï†ÎÑêÎ¶¨Ìã±Ïä§Ïö© Firebase SDKÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.
    implementation libs.firebase.perf
    implementation libs.firebase.messaging
    implementation libs.play.services.maps
    implementation libs.play.services.location
    implementation libs.places
    implementation libs.androidx.cardview
    implementation libs.regacy.androidx.constraint
    implementation libs.androidx.appcompat
    implementation libs.androidx.preference

    implementation libs.billing

    // Crashlytics
    implementation libs.google.firebase.analytics
    implementation libs.firebase.crashlytics

    //DynamicLink
    implementation libs.firebase.dynamic.links
    implementation libs.firebase.dynamic.links.ktx

    implementation libs.firebase.inappmessaging    //Ïù∏Ïï± Î©îÏãúÏßÄ
    implementation libs.firebase.inappmessaging.ktx
    implementation libs.firebase.inappmessaging.display    //Ïù∏Ïï± Î©îÏãúÏßÄ ÌëúÏãú
    implementation libs.firebase.inappmessaging.display.ktx

    // stetho
    implementation libs.stetho
    implementation libs.stetho.okhttp3
    implementation libs.stetho.js.rhino

    // retrofit
    implementation libs.retrofit.core
    implementation libs.converter.gson
    implementation libs.adapter.rxjava2
    implementation libs.logging.interceptor.v492
    implementation libs.okio.parent


    implementation libs.androidx.core.ktx // 1.12Îäî target sdk 34Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï®
//    compile(name: 'VungleAdapter', 'ext': 'aar')
//
//    // Vungle Adapter for AdMob
//    implementation files('libs/dagger-2.7.jar')
////    implementation files('libs/javax.inject-1.jar')
//    implementation files('libs/vungle-publisher-adaptive-id-4.0.3.jar')

		//2020-06-25 vungle remove
    implementation libs.publisher.sdk.android
    implementation libs.vungle // sdk Î≤ÑÏ†ÑÏóê ÎßûÏ∂∞ÏïºÌï®

    implementation libs.v2.user.rx // Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏

    implementation libs.okhttp
    implementation libs.androidx.multidex
    implementation libs.linesdk

    implementation libs.gson

    //    implementation files('libs/aplus_sdk2.0.jar')

    //    implementation files('libs/k1-floating_v1.0.1.jar')

    implementation libs.photoview

    // adcolony mediation
    implementation libs.sdk
    implementation libs.play.services.ads.identifier
    implementation libs.adcolony

    // tapjoy mediation
    implementation libs.tapjoy

    // unity ads mediation
    implementation libs.unity.ads
    implementation libs.unity

    // VM detector
    implementation libs.rootbeer.lib
    implementation libs.android.emulator.detector

    // custom videoview
    implementation libs.texturevideoview

    // exoplayer
    implementation libs.androidx.media3.exoplayer
    implementation libs.androidx.media3.session
    implementation libs.androidx.media3.ui
    implementation libs.androidx.media3.exoplayer.hls
    implementation libs.androidx.media3.exoplayer.dash

    implementation libs.kotlin.stdlib

    // facebook login
	implementation libs.facebook.login
    // facebook ad
    implementation libs.facebook

    // new image cropper
//    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    //implementation 'com.vanniktech:android-image-cropper:4.6.0'

    // superrewards
    //    implementation files('libs/SuperRewards-3.1b.jar')

    implementation(libs.socket.io.client) {
        // excluding org.json which is provided by Android
        exclude group: 'org.json', module: 'json'
    }

    implementation libs.mpandroidchart

    // glide
    implementation libs.ksp
    ksp "com.github.bumptech.glide:compiler:$glide_version"

    // Ï§ëÍµ≠Î≤ÑÏ†ÑÏùÄ ÏïÑÎûò ÏïàÏîÄ
    appImplementation libs.okhttp3.integration
    onestoreImplementation libs.okhttp3.integration
    celebImplementation libs.okhttp3.integration

//    implementation 'jp.wasabeef:glide-transformations:4.3.0'
    implementation libs.androidsvg

    //    implementation files('libs/offerwallsdk-release.aar')
    implementation files('libs/cropper-release.aar')

    // china ------------------------------------------------------------
    chinaImplementation "ch.acra:acra-mail:$acraVersion"
    // wechat
    chinaImplementation libs.wechat.sdk.android.without.mta

    // QQ
    chinaImplementation files('libs/open_sdk_lite.jar')

    // pushy
    chinaImplementation libs.pushy.sdk

    chinaImplementation(name: 'paymentwall-android-sdk', ext: 'aar', group: '', version: '')

    // Pangle
    chinaImplementation libs.ads.sdk.pro

    // nativex
    chinaImplementation files('libs/getchannel.jar')
    chinaImplementation files('libs/oaid_sdk_1.0.25.aar')
    // ------------------------------------------------------------------

    // celeb ------------------------------------------------------------
    // ------------------------------------------------------------------

    implementation libs.androidx.room.ktx
    implementation libs.androidx.room.runtime
    ksp "androidx.room:room-compiler:$room_version"

    debugImplementation libs.debug.db
    // ÌïÑÏöîÌï† ÎïåÎßå Ï£ºÏÑùÌï¥Ï†úÌïòÏó¨ ÏÇ¨Ïö©
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0'

    // tapjoy
    implementation libs.tapjoy.android.sdk

    // Socket
    // remove and add forked repository
//    implementation('com.koushikdutta.async:androidasync:3.0.9')
    implementation libs.androidasync

    // AppLovin
    implementation libs.applovin.sdk
    appImplementation      libs.bytedance.adapter    // Pangle„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
    onestoreImplementation libs.bytedance.adapter    // Pangle„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
    celebImplementation      libs.bytedance.adapter    // Pangle„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
    implementation libs.google.adapter       // AdMob„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
    implementation libs.maio.adapter         // maio„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
    implementation libs.unityads.adapter     // Unity Ads„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
//    implementation 'com.applovin.mediation:nend-adapter:6.0.1.1'         // nend„ÇíÂà©Áî®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÂâäÈô§
//    implementation 'net.nend.android:nend-sdk:6.0.1' => api level 19Í∞Ä ÏöîÍµ¨ÏÇ¨Ìï≠Ïù¥Îùº ÏùºÎã® ÎßâÏùå
    appImplementation libs.google.ad.manager.adapter
    onestoreImplementation libs.google.ad.manager.adapter
    celebImplementation libs.google.ad.manager.adapter

    implementation libs.lottie

    implementation libs.play.services.basement

    implementation libs.play.services.appset
    implementation libs.play.services.ads.identifier
    implementation libs.play.services.basement

    //Í∏∞ÌöçÏÉÅ facebook,pangle Ï∂îÍ∞Ä Ïù¥ÏßÄÎßå, ironsource  log Î¶¨Ïä§ÎÑà Ï∞çÌûå  adapter Ïò§Î•ò ÎÇú mediationÎì§ÎèÑ Ï∂îÍ∞ÄÌï¥Ï§å.
    implementation libs.audience.network.sdk

    //ÏïÑÏù¥Ïñ∏ÏÜåÏä§ mediation  -> Pangle
    appImplementation libs.ads.sdk
    onestoreImplementation libs.ads.sdk
    celebImplementation libs.ads.sdk

    implementation libs.play.service.ads

    implementation  libs.ironsource
    implementation  libs.applovin


    //RxKotlin
    implementation libs.rxandroid
    implementation libs.rxjava
    implementation libs.rxkotlin
    //ÏïàÎìúÎ°úÏù¥Îìú Ïï±Ïö© ÎùºÏù¥ÌîÑÏÇ¨Ïù¥ÌÅ¥ Ï≤òÎ¶¨.
    implementation libs.rxlifecycle
    implementation libs.rxbinding

    // ViewModel
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.activity.ktx

    implementation libs.androidx.lifecycle.runtime.ktx

    implementation libs.androidx.work.runtime.ktx

    implementation libs.segmentedbutton

    // qrcode : android 24 Ïù¥ÌïòÏóêÏÑúÎäî ÏïÑÎûòÏ≤òÎüº 3.3.0ÏúºÎ°ú Í≥†Ï†ïÌï¥Ïïº Ìï®
    implementation(libs.zxing.android.embedded) { transitive = false }
    implementation libs.zxing.core

    implementation libs.play.services.oss.licenses

    implementation libs.user.messaging.platform

    onestoreImplementation files('libs/iap_plugin_v17.01.00_20180206.jar')
    implementation libs.transcoder.android

    implementation libs.af.android.sdk

    implementation libs.androidx.compose.ui

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.activity.compose
    implementation libs.androidx.material3
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.compose.ui.tooling
    implementation libs.androidx.lifecycle.runtimeCompose
    implementation libs.androidx.lifecycle.viewModelCompose

    implementation libs.landscapist.bom
    implementation libs.landscapist.coil
    implementation libs.landscapist.placeholder
    implementation(libs.androidx.runtime.livedata)

    implementation(libs.hilt.navigation.compose)
    implementation(libs.androidx.lifecycle.viewModelCompose)

    // Hilt ÏùòÏ°¥ÏÑ± Ï∂îÍ∞Ä
    implementation libs.hilt.android
    kapt libs.hilt.android.compiler

    implementation(libs.kotlinx.serialization.json)

    implementation project(':bridge')

    debugImplementation(libs.junit)
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-parcelize'

repositories {
    mavenCentral()
}
